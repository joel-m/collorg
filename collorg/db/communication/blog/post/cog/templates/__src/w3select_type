#PRAGMA 'write':True
#PRAGMA 'strip':False
#PRAGMA 'tasks':['Authenticated navigation']
#PRAGMA 'label':'Post type selection'
#PRAGMA 'in_menu':False
# >>>
__doc__ = """
Should present the adequate post types available to the user
according to the object referenced (post attachement)
@args:
* cog_user
* ref_obj
"""
i18n_new = _("New")
i18n_in = _("in")
i18n_post = _("Post")
i18n_folder = _("Folder")
i18n_event = _("Event")
data = kwargs['data']
enabled_posts = ('Post', 'Event')
if self.cog_type_name == 'Folder' or not self._is_cog_post:
    enabled_posts = ('Post', 'Event', 'Folder')
post = self.db.table('collorg.communication.blog.post')
new_post = self.db.table(kwargs['post_fqtn'])
l_post_types = post.get_post_types()
id_ = html.random_id()
post_type = new_post.cog_type_name
# ---
<h2>{% i18n_new %} {% i18n_in %} <em>{% data.cog_label() %}</em></h2>
<h2>
<select trigger="True">
<option>{% _(post_type) %}</option>
# >>>
kw = {}
for key in ['ref_obj', 'target', 'data_oid', 'topic_oid']:
    if key in kwargs:
        kw[key] = kwargs[key]
links = []
for pt in l_post_types:
    link_id = html.random_id()
    if not pt.cog_type_name in enabled_posts:
        continue
    label="{}".format(pt.cog_type_name)
    links.append(
        html(self).a(
            "w3new_post", label=_(label), target="_page_article_",
            id_ = link_id, post_fqtn = pt.fqtn, **kw))
    if pt.cog_type_name == post_type:
        continue
    # ---
    <option triggered="#{% link_id %}" name="{% label %}">{% _(label) %}</option>
# ---
</select>
</h2>
<div class="hidden">{% links %}</div>
