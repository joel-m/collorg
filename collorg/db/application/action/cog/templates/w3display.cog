#PRAGMA 'strip':True
# >>>
import os, inspect, cgi
from webob import html_escape

def color(src):
    from pygments import highlight
    from pygments.lexers import PythonLexer
    from pygments.formatters import HtmlFormatter
    try:
        formatter = HtmlFormatter()
        colored = highlight( src, PythonLexer(), formatter )
        return colored.encode( 'utf-8' )
    except:
        return src
table = self.db.table( 'collorg.core.data_type' )
cls = table.join( self ).get()().__class__
dirname = os.path.dirname(
    os.path.realpath( inspect.getabsfile( cls ) ) )
mod_name = cls.__name__.lower()
method_name = self.name_.value
source = self.source_.value
template_src = "%s/cog/templates/%s.py" % (dirname, method_name)
# ---
<h1>{% cls.__name__ %}.{% method_name %}</h1>
<table>
# >>>
for field in self._cog_fields:
    val = field.value
    if val is None:
        val = "NULL"
    val = html_escape(str(val))
    if field.name == 'source':
        val = 'see bellow'
    if field.is_fkey:
        f_table = self.db.table( field.f_table.fqtn )
        f_table.join( self )
        val = html( f_table ).a( label = val )
    # ---
    <tr><th>{% field.name %}</th><td>{% val %}</td></tr>
# ---
</table>
# >>>
if source:
    # ---
    <h2>template source</h2>
    <pre>{% html_escape(source) %}</pre>
# ---
<h2>python module</h2>
{% color(open( template_src ).read()) %}
# ---
{#
#!! Element cog_ref not allowed as child of element section in this context
<cog_ref>{% self.cog_oid_ %}</cog_ref>
#}
